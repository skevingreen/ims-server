/**
 * Authors: Professor Krasso, Dua Hasan, Scott Green
 * Date: 4 July 2025
 * File: app.js
 * Description: Application setup. Autogenerated using Express generator.
 */

// require statements
const express = require('express');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const mongoose = require('mongoose'); // npm install mongoose
const { notFoundHandler, errorHandler } = require('./error-handler');

// Importing the index routers
const indexRouter = require('./routes/index');
const inventoryItemsRouter = require('./routes/items');
const categoriesRouter = require('./routes/categories');
const suppliersRouter = require('./routes/suppliers');

// Variable declaration for the express app
let app = express();

// Mongoose connection
const connectionString = process.env.DB_CONN || 'mongodb+srv://ims_user:s3cret@bellevueuniversity.qgo4d.mongodb.net/?retryWrites=true&w=majority&appName=BellevueUniversity';
const dbName = 'IMS'; // Database name

// Function to connect to the database
async function connectToDatabase() {
  try {
    await mongoose.connect(connectionString, {
      dbName: dbName
    });

    //console.log(`Connection to the '${dbName}' database was successful`);
  } catch(err) {
    console.error(`MongoDB connection error: ${err}`);
  }
}

connectToDatabase();  // Call the function to connect to the database

// CORS configuration
app.use((req, res, next) => {
  res.setHeader('Access-Control-Allow-Origin', '*'); // This allows all origins
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS'); // Allowed request methods
  res.setHeader('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept'); // Allowed headers
  next();
});

// Express app configuration
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());

// Routing configuration
app.use('/api', indexRouter);
app.use('/api/items', inventoryItemsRouter);
app.use('/api/categories', categoriesRouter);
app.use('/api/suppliers', suppliersRouter);

// Use the error handling middleware
app.use(notFoundHandler);
app.use(errorHandler);

// Export the app
module.exports = app;
